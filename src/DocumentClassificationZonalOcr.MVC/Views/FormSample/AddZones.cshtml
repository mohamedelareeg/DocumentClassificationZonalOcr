@using Newtonsoft.Json;
@model DocumentClassificationZonalOcr.Shared.Dtos.FormSampleDto
@{
    ViewData["Title"] = "Modify Zones";

    JsonSerializerSettings settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            };
    string serializedModel = JsonConvert.SerializeObject(Model.Zones, settings);
}

<style>
    canvas {
        border: 1px solid #000;
    }
</style>
<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-md-12">
            <div class="btn-container text-center">
                <a href="@Url.Action("Index", "FormSample", new { formId = Model.FormId })" class="btn btn-info">Back to Template Images</a>
                <button type="button" id="submitAllRectangles" class="btn btn-success">Submit All</button>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-10">
            <canvas id="imageCanvas" class="canvas-container"></canvas>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-10">
            <table id="dataTable" class="table table-striped">
                <thead>
                    <tr>
                        <th>X</th>
                        <th>Y</th>
                        <th>Width</th>
                        <th>Height</th>
                        <th>Anchor Point/Field</th>
                    </tr>
                </thead>
                <tbody id="rectangleData"></tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.5.0/fabric.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.css">
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.js"></script>
    <script>
        $(document).ready(function () {
            $('#dataTable').DataTable();
        });
        const canvas = new fabric.Canvas("imageCanvas", {
            selection: true,
        });

        const rectangles = @(Model.Zones != null
        ? Html.Raw(Json.Serialize(Model.Zones))
        : Html.Raw(Json.Serialize(new List<DocumentClassificationZonalOcr.Shared.Dtos.ZoneDto>()))
        );
        function fetchFields() {
            try {
                const xhr = new XMLHttpRequest();
                xhr.open("GET", `/Form/GetFields?formId=${@Model.FormId}`, false);
                xhr.send();

                if (xhr.status === 200) {
                    const fields = JSON.parse(xhr.responseText);
                    return fields;
                } else {
                    console.error("Error fetching fields:", xhr.status, xhr.statusText);
                    return null;
                }
            } catch (error) {
                console.error("An error occurred while fetching fields:", error);
                return null;
            }
        }
    </script>

    <script>
        const formSampleId = @Model.Id;
        const formId = @Model.Id;
        document.getElementById("submitAllRectangles").addEventListener("click", submitAllRectangles);
        async function submitAllRectangles() {
            console.log(rectangles);
            const allRectangleData = rectangles.map((rectangle) => {
                console.log(rectangle);
                return {
                    X: rectangle.X ?? rectangle.x,
                    Y: rectangle.Y ?? rectangle.y,
                    ActualWidth: rectangle.Width ?? rectangle.actualWidth,
                    ActualHeight: rectangle.Height ?? rectangle.actualHeight,
                    ActualImageWidth: image.width,
                    ActualImageHeight: image.height,
                    FieldId: rectangle.FieldId ?? rectangle.fieldId,

                    Regex: rectangle.Regex ?? rectangle.regex,
                    WhiteList: rectangle.WhiteList ?? rectangle.whiteList,
                    IsDuplicated: rectangle.IsDuplicated ?? rectangle.isDuplicated,
                    ZoneFieldType: rectangle.Type ?? rectangle.type,
                    TemplateImageId: @Model.Id,
                    IsAnchorPoint: rectangle.IsAnchorPoint ?? rectangle.isAnchorPoint,
                };
            });
            console.log(allRectangleData);
            try {
                const response = await fetch("/FormSample/SubmitRectangleData", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        id: formSampleId,
                        formId: formId,
                        rectangles: allRectangleData
                    }),
                });

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Rectangles Submitted!',
                        text: 'All rectangle data submitted successfully.',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: `Error submitting rectangle data: ${response.status} - ${response.statusText}`,
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: `An error occurred while submitting rectangle data: ${error.message}`,
                });
            }
        }
    </script>
    <script src="~/custom/rectangles.js"></script>
    <script>
        const image = new Image();
        image.src = "@Html.Raw(Model.ImagePath)";
        image.onload = function () {
            canvas.setWidth(image.width);
            canvas.setHeight(image.height);

            canvas.setBackgroundImage(image.src, canvas.renderAll.bind(canvas), {
                scaleX: canvas.width / image.width,
                scaleY: canvas.height / image.height,
            });

            canvas.renderAll();
            displaySavedRectangleData();
        };

    </script>
}
